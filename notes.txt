

git init - this will start the tracking process
del

touch getignore

https://www.youtube.com/watch?v=HVsySz-h9r4 Corey, great video
pythonProject
pythonProjectpythonProject
cd c:/users/xz02rd/Documents/C/Cousera/P4E/pythonProject/practice_project/oaf-psd-bootcamp
cd C:\Users\xz02rd\Documents\C\Cousera\P4E\pythonProject\practice_project\oaf-psd-bootcamp





6079fe6 (HEAD -> master) first commit  no second file at this point XXX
b899b0f (HEAD -> master, origin/master, origin/HEAD) second commit.  myfile has two lines xxx
5669e85 (HEAD -> master) Added first file

Trees......
git clone https://github.com/mevett/resetTutorialSetUp.git
cd resetTutorialSetUp
git log --oneline
git status

5
echo "hello git reset" >> myfile
git status
git ls-files -s
git add myfile
git ls-files -s
git commit -am "added content to my file"
git ls-files -s
git status

6a
echo "my first file" >> firstFile
git add firstFile
git commit -am "Added first file"

6b - get XXX from log   962bb9e

git log --oneline

echo "my second file" >> secondFile
git add secondFile
echo "Adding second line to first file" >> firstFile
cat firstFile
cat secondFile
git status
git ls-files -s
git log --oneline

7
git reset --hard HEAD^
git status
git ls-files -s
cat firstFile
cat secondFile

8
git reset --hard XXXX    **** insert hash data here
git status
git ls-files -s
cat firstFile
cat secondFile

C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.1.2\jbr\bin
C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2021.1.2\jbr

C:\Users\xz02rd\classes\junit-4.10.jar;

java org.junit.runner.JUnitCore  got it!

javac oldJUnit/*.java
java oldJUnit.TestRunner

javac *.java
java org.junit.runner.JUnitCore DateTest



Midterm test...............

cat f1  this will print f1 contents

git status            log - are files up to date????
git status -s         short status
git log --oneline     compact log
git ls-files -s       lists files in staging area
ls                    lists files in working dir

want git trees / branches to be consistent


git init
echo "file 1..........." >> f1
git add .
git commit -m "first save, 1 lines in f1"
echo "Adding second line to f1" >> f1
git commit -am "second commit, 2 lines in f1"
echo "Adding THIRD line to f1" >> f1
git commit -am "3d commit, 3 lines in f1"
git log --oneline



RESET............
While resetting works great for local branches on your own machine, its method of "rewriting history"
doesn't work for remote branches that others are using.

Reset changes the history of a branch
git reset --hard xxxx will change files in working dir !!!!!!!!! Careful.....
git reset xxxx will move head, but not change working files

git reset HEAD^   moves HEAD and main one back
git reset local^
git reset --hard <ref>    most common, and dangerous



REVERT.................
revert creates a new commit
git revert HEAD - goes back 1 commit step, modifies working files, better for groups
git revert HEAD    NOT git revert HEAD^ !!!!
git revert <rev commit hash>
git revert is the “safest” way to handle undo's, because no history or commits are lost.
YES... reverting back does change working directory



git branch <branch>
git checkout <branch>
git checkout -b <branch>  this creates a new <branch> and checks it out
git checkout HEAD^     goes back one level, HEAD is active



git branch -f main HEAD~3  forces main branch (whether active or not) to move 3 back from active
git branch -f main c6


git merge <merge this Branch into current>

rebasing - nice and linear, but NOT ideal for groups -- DON'T use
git rebase <rebase this branch into current>

HEAD - points to currently checked out commit
HEAD^^ same as HEAD~2
main^ - pointer to main's parent

git checkout main~3   puts HEAD 3 up from main
git checkout HEAD^    moved HEAD one back






Most git commands which make changes to the working tree will start by changing HEAD.


pull = fetch, followed by a merge

git push remote
if not FF then do a pull, merge, then push again





